{{- /*********************************************************************** -}}
    DEFINE
{{- ***********************************************************************/ -}}

{{- /* Packages */ -}}
{{- $ukgen  := .Core.Packages.Ukgen  -}}
{{- $ukinfo := .Core.Packages.Ukinfo -}}
{{- $ukmeta := .Core.Packages.Ukmeta -}}

{{- /* Encoder Names */ -}}
{{- $EncodeHelp     := .Core.Names.EncoderDefault     -}}
{{- $HelpEncoder    := .Core.Names.EncoderType        -}}
{{- $NewHelpEncoder := .Core.Names.EncoderConstructor -}}

{{- /* Info Types */ -}}
{{- $FlagInfo     := .Core.Types.FlagInfo     -}}
{{- $ArgumentInfo := .Core.Types.ArgumentInfo -}}

{{- /* Tag Keys */ -}}
{{- $tagKeyIndex  := .Core.Names.TagKeyIndex  -}}
{{- $tagKeyInline := .Core.Names.TagKeyInline -}}

{{- /*********************************************************************** -}}
    DISPLAY
{{- ***********************************************************************/ -}}

package {{ .Core.Names.Package }}

import (
{{- range .Imports }}
    {{ printf "%s" . -}}
{{ end }}
)

// =============================================================================
// Parameter Type Mappings
// =============================================================================

var paramsMap = make({{ $ukgen }}.ParamsMap)

func init() {
{{- range .Params }}
    {{ $ukgen }}.ParamsMapAdd[{{ .Type.Source }}, {{ .Type.Sink }}](paramsMap)
{{- end }}
}

// =============================================================================
// Help Encoder
// =============================================================================

var {{ $EncodeHelp }} = {{ $NewHelpEncoder }}({{ $ukinfo }}.Encode).Encode

type {{ $HelpEncoder }}[T any] func(info any) (description T, err error)

func {{ $NewHelpEncoder }}[T any](encodeDescription func(any) (T, error)) {{ $HelpEncoder }}[T] {
    return {{ $HelpEncoder }}[T](encodeDescription)
}

func (x {{ $HelpEncoder }}[T]) Encode(in {{ $ukmeta }}.Input) (any, error) {
    genInput := paramsMap.NewInput(in)
    genEncoder := {{ $ukgen }}.Encoder[T](x)
    return genEncoder.Encode(genInput)
}

// =============================================================================
// Parameter Types
// =============================================================================

{{ range .Params }}
type {{ .Type.Sink }} struct {
{{- if .Inlines }}
{{- range .Inlines }}
    {{ printf "%s %s `%s:\"%d\" %s:\"\"`" .FieldName .FieldType.Sink $tagKeyIndex .FieldIndex $tagKeyInline }}
{{- end }}
{{- end }}

{{- if .Flags }}
{{- range .Flags }}
    {{ printf "%s %s `%s:\"%d\"`" .FieldName $FlagInfo $tagKeyIndex .FieldIndex }}
{{- end }}
{{- end }}

{{- if .Arguments }}
{{- range .Arguments }}
    {{ printf "%s %s `%s:\"%d\"`" .FieldName $ArgumentInfo $tagKeyIndex .FieldIndex }}
{{- end }}
{{- end }}
}
{{ end -}}
